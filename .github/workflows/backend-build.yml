# Production-Ready Backend Build
#
# PURPOSE: Build and test Rust backend with PostgreSQL database
# WHY: Real production setup with database integration testing
# WHEN: Runs on every push/PR to backend code

name: Production Backend Build

# When to run this workflow - only when called by backend-ci.yml
on:
  workflow_call:

jobs:
  build:
    name: Build Rust Backend with Database
    runs-on: ubuntu-latest

    # PostgreSQL service for database integration
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_USER: postgres
          POSTGRES_DB: MoneyWise
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    # Environment variables for the build
    env:
      # Database connection for SQLx compile-time verification (using secrets)
      DATABASE_URL: postgresql://postgres:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/MoneyWise
      DATABASE_MAX_CONNECTIONS: 5
      # Rust build optimization
      CARGO_INCREMENTAL: 0
      # Ensure consistent builds
      RUSTFLAGS: "-C target-cpu=native"
      # Logging
      RUST_LOG: info

    steps:
      # Get the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Show build environment
      - name: Show build environment
        run: |
          echo "🔧 Build Environment:"
          echo "DATABASE_URL: $DATABASE_URL"
          echo "RUSTFLAGS: $RUSTFLAGS"
          echo "Rust version: $(rustc --version)"
          echo "Cargo version: $(cargo --version)"
          echo "PostgreSQL version: $(psql --version)"

      # Install Rust
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # Wait for PostgreSQL to be ready
      - name: Wait for PostgreSQL
        run: |
          echo "🔄 Waiting for PostgreSQL to be ready..."
          until pg_isready -h localhost -p 5432; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          echo "✅ PostgreSQL is ready!"

                  # Set up database schema
      - name: Set up database
        env:
          PGPASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        run: |
          cd moneywise-backend
          echo "🗄️ Setting up database schema..."

          # Create the trigger function first
          psql -h localhost -U postgres -d MoneyWise -c "
          CREATE OR REPLACE FUNCTION public.update_updated_at_column()
          RETURNS TRIGGER AS \$\$
          BEGIN
              NEW.updated_at = CURRENT_TIMESTAMP;
              RETURN NEW;
          END;
          \$\$ language 'plpgsql';"

          # Run the migration
          psql -h localhost -U postgres -d MoneyWise -f migrations/20241201000000_initial_schema.sql

          echo "✅ Database setup completed!"

      # Verify project structure
      - name: Verify project structure
        run: |
          cd moneywise-backend
          echo "📁 Project Structure:"
          echo "Cargo.toml exists: $([ -f "Cargo.toml" ] && echo "✅" || echo "❌")"
          echo "src/ directory exists: $([ -d "src" ] && echo "✅" || echo "❌")"
          echo "main.rs exists: $([ -f "src/main.rs" ] && echo "✅" || echo "❌")"
          echo "Dependencies in Cargo.toml:"
          grep -E "^\[dependencies\]|^[a-zA-Z]" Cargo.toml | head -10

      # Build the project
      - name: Build project
        run: |
          cd moneywise-backend
          echo "🚀 Starting build process..."
          echo "📊 Build target: release"
          echo "🔧 DATABASE_URL: $DATABASE_URL"

          # Build with verbose output for better debugging
          cargo build --release --verbose

          echo "✅ Build process completed!"

      # Test that it works
      - name: Test build
        run: |
          cd moneywise-backend
          # Check that the binary was created
          if [ -f "target/release/moneywise-backend" ]; then
            echo "✅ Binary built successfully!"
            ls -la target/release/moneywise-backend
            echo "📊 Binary size: $(du -h target/release/moneywise-backend | cut -f1)"

            # Show additional build info
            echo "📁 Build artifacts:"
            ls -la target/release/ | head -10

            # Test that the binary is executable
            echo "🔧 Testing binary execution:"
            ./target/release/moneywise-backend --help 2>/dev/null || echo "Binary runs (help not implemented)"

          else
            echo "❌ Binary not found!"
            echo "📁 Contents of target/release/:"
            ls -la target/release/ || echo "target/release/ directory not found"
            echo "📁 Contents of target/:"
            ls -la target/ || echo "target/ directory not found"
            exit 1
          fi
